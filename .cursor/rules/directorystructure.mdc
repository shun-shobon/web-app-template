---
description: 
globs: 
alwaysApply: false
---
# ディレクトリ構成

このプロジェクトのディレクトリ構成とファイル配置について説明します。

## 全体構成

```
web-app-template/
├── .cursor/                 # Cursor IDE設定
│   └── rules/              # Cursor Rules定義
├── src/                    # ソースコード
│   ├── components/         # Reactコンポーネント
│   ├── index.tsx          # アプリケーションエントリーポイント
│   └── theme.ts           # Mantineテーマ設定
├── eslint.config.js       # ESLint設定
├── index.html             # HTMLテンプレート
├── mise.toml              # 開発環境バージョン管理
├── package.json           # npm依存関係・スクリプト
├── pnpm-lock.yaml         # pnpmロックファイル
├── prettier.config.js     # Prettier設定
├── renovate.json          # 依存関係自動更新設定
├── tsconfig.json          # TypeScript設定
├── vite.config.ts         # Viteビルド設定
├── README.md              # プロジェクト説明
└── LICENSE                # ライセンス
```

## 主要ディレクトリ・ファイルの役割

### `/src` - ソースコード
- **[index.tsx](mdc:src/index.tsx)**: アプリケーションのエントリーポイント
- **[theme.ts](mdc:src/theme.ts)**: Mantine UIライブラリのテーマ設定
- **`components/`**: Reactコンポーネントの配置場所
  - **[App.tsx](mdc:src/components/App.tsx)**: メインアプリケーションコンポーネント

### 設定ファイル
- **[package.json](mdc:package.json)**: 依存関係、スクリプト、プロジェクトメタデータ
- **[tsconfig.json](mdc:tsconfig.json)**: TypeScript設定（パスエイリアス `~/*` → `./src/*`）
- **[vite.config.ts](mdc:vite.config.ts)**: Viteビルド設定
- **[eslint.config.js](mdc:eslint.config.js)**: ESLint設定
- **[prettier.config.js](mdc:prettier.config.js)**: Prettier設定
- **[mise.toml](mdc:mise.toml)**: 開発環境のバージョン管理

### エントリーポイント
- **[index.html](mdc:index.html)**: Viteが使用するHTMLテンプレート

## パス解決とエイリアス

TypeScript設定で以下のパスエイリアスが定義されています：
- `~/*` → `./src/*`

これにより、`import { Component } from '~/components/Component'` のような形でインポートが可能です。

## 命名規則とベストプラクティス

### コンポーネント
- Reactコンポーネントは `src/components/` に配置
- ファイル名はPascalCase（例：`App.tsx`、`MyComponent.tsx`）
- デフォルトエクスポートを使用

### ディレクトリ
- 機能別ディレクトリは小文字（例：`components`、`hooks`、`utils`）
- 必要に応じて機能やページ単位でサブディレクトリを作成

## 注意事項

- **ディレクトリ構造の変更は事前承認が必要です**
- 新しいディレクトリを作成する場合は、この構成に従ってください
- パスエイリアス（`~/*`）を活用して相対パスの複雑化を避けてください
